name: Continuous delivery to kubernetes cluster
author: etereoio
description: |-
  Deploy your applications to kubernetes using helm
inputs:
  helmRepoFilePath:
    description: 'Path to the encrypted helm repos file'
    required: false
    default: 'helm.repositories.yaml'
  helmfileName:
    description: 'Name of the helmfile config'
    required: false
    default: 'helmfile.yaml'
  baseDeployDir:
    description: 'Directory where different deployment enviroment folders are placed'
    required: false
    default: 'deploy'
  environment:
    description: 'Environment where to deploy the application. Must match with a the folder name inside "baseDeployDir". Inside the folder path a helmfile inside have to be placed'
    required: true
    default: ''
  gcpProjectId:
    description: 'Project id where the kubernetes cluster is located'
    required: true
    default: ''
  gcpServiceAccountKey:
    description: 'Gcp service account key to use for authentication agains gcp'
    required: true
    default: ''
  gkeClusterName:
    description: 'GKE k8s cluster name'
    required: true
    default: ''
  gcpClusterZone:
    description: 'Gcp zone where the cluster is located'
    required: true
    default: ''
  helmfileVersion:
    description: 'Version of helmfile'
    required: false
    default: 'v0.132.0'
  dockerImageDigest:
    description: 'Docker image tag to be placed in the helm chart values. Require replaceDockerImage attr set to true'
    required: false
    default: ''
  dockerImageDigestKeyPath:
    description: 'Yaml path in dot notation to Docker image digest value that needs to be replaced'
    required: false
    default: 'base.deployment.image.digest'
  dynamicNamespace:
    description: 'Forces deployment to a dynamic environment. The k8s namespace name comes from the github branch name that triggers the event'
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Download sops binary for decrypting enc. helmfile
      shell: bash
      run: |-
        curl -L https://github.com/mozilla/sops/releases/download/v3.6.1/sops-v3.6.1.linux -O
        mv sops-v3.6.1.linux sops
        chmod +x sops
    - name: Decrypt helm repositories file using sops
      shell: bash
      run: |-
        echo "Decrypting helm repositories in ${{ inputs.helmRepoFilePath }}"
        sops -d ${{ inputs.helmRepoFilePath }} > ./helm.repositories.dec.yaml
    - name: Get gke cluster credentials
      shell: bash
      run: |-
        echo "Get cluster credentials"
        gcloud container clusters get-credentials ${{ inputs.gkeClusterName }} --zone ${{ inputs.gcpClusterZone }}
    - name: Add helm repositories
      shell: bash
      run: |-
        counter=0
        REPO_FILE="./helm.repositories.dec.yaml"
        for repo in $(jq -r '.repositories[].name' "$REPO_FILE") ; do
          echo "Adding helm repo: $repo"
          HELM_LOCAL_USER="$(jq -r ".repositories[$counter].username | select (.!=null)" "$REPO_FILE")"
          HELM_LOCAL_PASS="$(jq -r ".repositories[$counter].password | select (.!=null)" "$REPO_FILE")"
          HELM_LOCAL_URL="$(jq -r ".repositories[$counter].url | select (.!=null)" "$REPO_FILE")"
          if [ -n  "$HELM_LOCAL_USER" ] ; then
            helm repo add $repo $HELM_LOCAL_URL --username \"$HELM_LOCAL_USER\" --password \"$HELM_LOCAL_PASS\"
          else
            helm repo add $repo $HELM_LOCAL_URL
          fi
          ((counter=counter+1))
        done
    - name: Download helmfile binary
      shell: bash
      run: |-
        curl -L https://github.com/roboll/helmfile/releases/download/${{ inputs.helmfileVersion }}/helmfile_linux_amd64 -o /usr/local/bin/helmfile
        chmod +x /usr/local/bin/helmfile
    - name: Install helm-secrets helm plugin
      shell: bash
      run: helm plugin install https://github.com/zendesk/helm-secrets
    - name: Syncronize helm releases using helmfile and replacing docker image digest
      shell: bash
      run: |-
        HELM_EXTRA_ARGS=""

        NAMESPACE="$(echo "$GITHUB_REF" | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')"

        if [ "${{ inputs.dockerImageDigest}}" != "" ]; then
          HELM_EXTRA_ARGS+="--state-values-set ${{ inputs.dockerImageDigestKeyPath }}=${{ inputs.dockerImageDigest }}"
        fi

        helmfile sync -f ${{ inputs.baseDeployDir }}/${{ inputs.environment }}/${{ inputs.helmfileName }} $HELM_EXTRA_ARGS