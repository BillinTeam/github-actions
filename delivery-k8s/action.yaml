name: Continuous delivery to kubernetes cluster (Feature and Development branches)
author: BillinTeam
description: |-
  Deploy your applications to kubernetes using helm
inputs:
  helmRepoFilePath:
    description: "Path to the encrypted helm repos file"
    required: false
    default: "helm.repositories.yaml"
  helmfileName:
    description: "Name of the helmfile config"
    required: false
    default: "helmfile.yaml"
  baseDeployDir:
    description: "Directory where different deployment enviroment folders are placed"
    required: false
    default: "deploy"
  helm_deploy_environment:
    description: 'Environment where to deploy the application. Must match with a the folder name inside "baseDeployDir". Inside the folder path a helmfile inside have to be placed'
    required: false
    default: ""
  gkeClusterName:
    description: "GKE k8s cluster name"
    required: true
    default: ""
  gcpClusterZone:
    description: "Gcp zone where the cluster is located"
    required: true
    default: ""
  helmfileVersion:
    description: "Version of helmfile"
    required: false
    default: "v0.132.0"
  dockerImageDigest:
    description: "Docker image digest to be placed in the helm chart values. Require replaceDockerImage attr set to true"
    required: false
    default: ""
  dockerImageDigestKeyPath:
    description: "Yaml path in dot notation to Docker image digest value that needs to be replaced"
    required: false
    default: "base.deployment.image.digest"
  dockerImageTag:
    description: "Docker image tag to be placed in the helm chart values. Require replaceDockerImage attr set to true"
    required: false
    default: ""
  dockerImageTagKeyPath:
    description: "Yaml path in dot notation to Docker image tag value that needs to be replaced"
    required: false
    default: "base.deployment.image.tag"
  dockerImageTagEnv:
    description: "Exported docker image tag as environment variable to be used in helmfile values instead of set"
    required: false
    default: ""
  dockerImageTagEnvName:
    description: "Name of the environment variable to be used as tag"
    required: false
    default: "DOCKER_IMAGE_TAG"
  extraHelmEnvVars:
    description: "Extra helm deployment environment variables to be set in the helmfile sync command"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Download sops binary for decrypting enc. helmfile
      shell: bash
      run: |-
        curl -L https://github.com/mozilla/sops/releases/download/v3.6.1/sops-v3.6.1.linux -O
        mv sops-v3.6.1.linux sops
        chmod +x sops
    - name: Download yq binary for parse helm repos file
      shell: bash
      run: |-
        curl -L https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O
        mv yq_linux_amd64 yq
        chmod +x ./yq
    - name: Decrypt helm repositories file using sops
      shell: bash
      run: |-
        ./sops -d ${{ inputs.helmRepoFilePath }} > ./helm.repositories.dec.yaml
    - name: Get gke cluster credentials
      shell: bash
      run: |-
        gcloud container clusters get-credentials ${{ inputs.gkeClusterName }} --zone ${{ inputs.gcpClusterZone }}
    - name: Add helm repositories
      shell: bash
      run: |-
        echo "Adding helm repositories.."
        counter=0
        REPO_FILE="$(mktemp --suffix .json)"
        ./yq r "./helm.repositories.dec.yaml" -j > "$REPO_FILE"
        for repo in $(jq -r '.repositories[].name' "$REPO_FILE") ; do
          HELM_LOCAL_USER="$(jq -r ".repositories[$counter].username | select (.!=null)" "$REPO_FILE")"
          HELM_LOCAL_PASS="$(jq -r ".repositories[$counter].password | select (.!=null)" "$REPO_FILE")"
          HELM_LOCAL_URL="$(jq -r ".repositories[$counter].url | select (.!=null)" "$REPO_FILE")"
          if [ -n  "$HELM_LOCAL_USER" ] ; then
            helm repo add $repo $HELM_LOCAL_URL --username $HELM_LOCAL_USER --password $HELM_LOCAL_PASS --pass-credentials
          else
            helm repo add $repo $HELM_LOCAL_URL
          fi
          ((counter=counter+1))
        done
    - name: Download helmfile binary
      shell: bash
      run: |-
        curl -L https://github.com/roboll/helmfile/releases/download/${{ inputs.helmfileVersion }}/helmfile_linux_amd64 -O
        mv helmfile_linux_amd64 helmfile
        chmod +x ./helmfile
    - name: Install helm-secrets helm plugin
      shell: bash
      run: helm plugin install https://github.com/zendesk/helm-secrets
    - name: Syncronize helm releases using helmfile and replacing docker image digest
      shell: bash
      id: deploy
      run: |-
        HELM_EXTRA_ARGS=""

        if [ "${{ inputs.dockerImageDigest}}" != "" ]; then
          echo "Replace docker image sha digest of the helm release"
          HELM_EXTRA_ARGS+="--set ${{ inputs.dockerImageDigestKeyPath }}=${{ inputs.dockerImageDigest }} "
        fi

        if [ "${{ inputs.dockerImageTag}}" != "" ]; then
          echo "Replace docker image tag of the helm release"
          HELM_EXTRA_ARGS+="--set ${{ inputs.dockerImageTagKeyPath }}=${{ inputs.dockerImageTag }} "
        fi

        if [ "${{ inputs.dockerImageTagEnv}}" != "" ]; then
          echo "Export docker image tag as ${{inputs.dockerImageTagEnvName}}=${{inputs.dockerImageTagEnv}}"
          export ${{inputs.dockerImageTagEnvName}}=${{inputs.dockerImageTagEnv}}
        fi

        EXTRA_HELM_ENV_VARS=""
        for env_var in ${{ inputs.extraHelmEnvVars }}; do
          EXTRA_HELM_ENV_VARS+="--set base.deployment.environment.extraVarsObject.$env_var "
        done

        ./helmfile --file ${{ inputs.baseDeployDir }}/$ENVIRONMENT/${{ inputs.helmfileName }} sync $HELM_EXTRA_ARGS $EXTRA_HELM_ENV_VARS
